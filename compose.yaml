services:
  frontend:
    env_file:
      - ./frontend/.env
    build: ./frontend
    container_name: frontend
    # ports:
    #   - "80:5173"
    networks:
      - devopsdojo
    labels:
      # Enable Traefik for this service and specify the secure entrypoint (HTTPS)
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`projectchigozie.me`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"

      # Enable TLS for this router & use the 'myresolver' certificates resolver for obtaining SSL certificates
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.routers.frontend.tls.certresolver=myresolver"

  backend:
    env_file:
      - ./backend/.env
    environment:
      - PYTHONPATH=/backend
    build: ./backend
    container_name: backend
    # ports:
    #   - "8000:8000"
    networks:
      - devopsdojo
    depends_on:
      - db
    command: >
      sh -c "
      until pg_isready -h db -U app; do
        echo 'Waiting for database...';
        sleep 2;
      done;
      poetry run bash ./prestart.sh && poetry run uvicorn app.main:app --host 0.0.0.0 --port 8000"
    labels:
      # Enable Traefik for this service and specify the secure entrypoint (HTTPS)
      - "traefik.enable=true"
      # # Middleware for CORS
      - "traefik.http.middlewares.backend-cors.headers.accessControlAllowOriginList=https://projectchigozie.me"
      # Route /api to the backend root
      - "traefik.http.routers.backend-api.rule=Host(`projectchigozie.me`) && PathPrefix(`/api`)"
      - "traefik.http.middlewares.api-strip-prefix.stripPrefix.prefixes=/api"
      - "traefik.http.routers.backend-api.middlewares=api-strip-prefix,backend-cors"
      - "traefik.http.routers.backend-api.entrypoints=websecure"

      # Route /docs to /docs (Swagger UI)
      - "traefik.http.routers.backend-docs.rule=Host(`projectchigozie.me`) && PathPrefix(`/docs`)"
      - "traefik.http.routers.backend-docs.middlewares=backend-cors"
      - "traefik.http.routers.backend-docs.entrypoints=websecure"

      # Route /api/v1/openapi.json to the OpenAPI spec
      - "traefik.http.routers.backend-openapi.rule=Host(`projectchigozie.me`) && Path(`/api/v1/openapi.json`)"
      - "traefik.http.routers.backend-openapi.middlewares=backend-cors"
      - "traefik.http.routers.backend-openapi.entrypoints=websecure"

      # Enable TLS for these routers & use the 'myresolver' certificates resolver for obtaining SSL certificates
      - "traefik.http.routers.backend-api.tls=true"
      - "traefik.http.routers.backend-api.tls.certresolver=myresolver"
      - "traefik.http.routers.backend-docs.tls=true"
      - "traefik.http.routers.backend-docs.tls.certresolver=myresolver"
      - "traefik.http.routers.backend-openapi.tls=true"
      - "traefik.http.routers.backend-openapi.tls.certresolver=myresolver"
  
  db:
    image: postgres:13-alpine
    container_name: db
    restart: always
    environment:
      - POSTGRES_USER=app
      - POSTGRES_PASSWORD=changethis123
      - POSTGRES_DB=app
    # ports:
    #   - "5432:5432"
    networks:
      - devopsdojo
    volumes: 
      - db:/var/lib/postgresql/data
  
  adminer:
    image: adminer
    container_name: adminer
    restart: always
    # ports:
    #   - 8080:8080
    networks:
      - devopsdojo
    labels:
      # Enable Traefik for this service and specify the secure entrypoint (HTTPS)
      - "traefik.enable=true"
      - "traefik.http.routers.adminer.rule=Host(`db.projectchigozie.me`)"
      - "traefik.http.routers.adminer.entrypoints=websecure"
      # Enable TLS for this router & use the 'myresolver' certificates resolver for obtaining SSL certificates
      - "traefik.http.routers.adminer.tls=true"
      - "traefik.http.routers.adminer.tls.certresolver=myresolver"

  reverse-proxy:
    image: traefik:v3.2
    container_name: traefik
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    command:
      - --api
    networks:
      - devopsdojo
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik.yml:/etc/traefik/traefik.yml
      - ./acme:/acme.json
    labels:
      # Enable Traefik for this service
      - "traefik.enable=true"

      # Dashboard route
      - "traefik.http.routers.dashboard-api.rule=Host(`projectchigozie.me`) && PathPrefix(`/dashboard`) || (PathPrefix(`/debug`) || PathPrefix(`/api/http`) || PathPrefix(`/api/tcp`) || PathPrefix(`/api/udp`) || PathPrefix(`/api/entrypoints`) || PathPrefix(`/api/overview`) || PathPrefix(`/api/rawdata`) || PathPrefix(`/api/version`))"
      - "traefik.http.routers.dashboard-api.service=api@internal"
      - "traefik.http.middlewares.dashboard-auth.basicauth.users=admin:$$2y$$05$$WdZvGjRc.quOQ9YuoiNd4.mEHXXJgWB0vW66wvaafldqlM0vORThO"
      - "traefik.http.routers.dashboard-api.middlewares=dashboard-auth"
      - "traefik.http.routers.dashboard-api.entrypoints=websecure"

      # # Middleware to strip the /traefik prefix for the dashboard route
      # - "traefik.http.middlewares.strip-traefik-prefix.stripPrefix.prefixes=/traefik"
      # - "traefik.http.routers.dashboard.entrypoints=traefik"

      # Enable TLS for this router & use the 'myresolver' certificates resolver for obtaining SSL certificates
      # - "traefik.http.routers.dashboard.tls=true"
      # - "traefik.http.routers.dashboard.tls.certresolver=myresolver"
      - "traefik.http.routers.dashboard-api.tls=true"
      - "traefik.http.routers.dashboard-api.tls.certresolver=myresolver"

      # # Set a high priority for the Traefik dashboard route
      # - "traefik.http.routers.dashboard.priority=1000"

networks:
  devopsdojo:
    driver: bridge
    name: devopsdojo

volumes:
  db:
    driver: local